/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "registerAsset(string,string,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reviewRequest(bool,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receiveToken(asset,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "analyst": {
          "type": "bytes",
          "key": "analyst"
        },
        "customer": {
          "type": "bytes",
          "key": "customer"
        },
        "assetName": {
          "type": "bytes",
          "key": "assetName"
        },
        "assetType": {
          "type": "bytes",
          "key": "assetType"
        },
        "asssetValue": {
          "type": "uint64",
          "key": "asssetValue"
        },
        "assetDescription": {
          "type": "bytes",
          "key": "assetDescription"
        },
        "assetStatus": {
          "type": "bytes",
          "key": "assetStatus"
        },
        "analystComments": {
          "type": "bytes",
          "key": "analystComments"
        },
        "asaId": {
          "type": "uint64",
          "key": "asaId"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 7,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjMuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3MsYWRkcmVzcyl2b2lkCi8vCi8vIENyZWF0ZXMgdGhlIGNvbnRyYWN0IHdpdGggaW5pdGlhbCBhZGRyZXNzZXMKLy8KLy8gQHBhcmFtIGFuYWx5c3QgLSBUaGUgYWRkcmVzcyBvZiB3aG8gd2lsbCByZXZpZXcgYW5kIGFwcHJvdmUgYXNzZXQgaW5zdXJhbmNlCi8vIEBwYXJhbSBjdXN0b21lciAtIFRoZSBhZGRyZXNzIG9mIHRoZSBwZXJzb24gd2hvIHdpbGwgcmVxdWVzdCB0aGUgYXNzZXQgaW5zdXJhbmNlIGV2YWx1YXRpb24KLy8gQHJldHVybnMgdm9pZAphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBjdXN0b21lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFuYWx5c3Q6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3MsYWRkcmVzcyl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgpjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjMzCgkvLyB0aGlzLmFuYWx5c3QudmFsdWUgPSBhbmFseXN0CglieXRlIDB4NjE2ZTYxNmM3OTczNzQgLy8gImFuYWx5c3QiCglmcmFtZV9kaWcgLTEgLy8gYW5hbHlzdDogYWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czozNAoJLy8gdGhpcy5jdXN0b21lci52YWx1ZSA9IGN1c3RvbWVyCglieXRlIDB4NjM3NTczNzQ2ZjZkNjU3MiAvLyAiY3VzdG9tZXIiCglmcmFtZV9kaWcgLTIgLy8gY3VzdG9tZXI6IGFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6MzUKCS8vIHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPSAnbm9uZScKCWJ5dGUgMHg2MTczNzM2NTc0NTM3NDYxNzQ3NTczIC8vICJhc3NldFN0YXR1cyIKCWJ5dGUgMHgwMDA0NmU2ZjZlNjUKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJlZ2lzdGVyQXNzZXQoc3RyaW5nLHVpbnQ2NCxzdHJpbmcsc3RyaW5nKXZvaWQKLy8KLy8gQWxsb3dzIGN1c3RvbWVyIHRvIHJlZ2lzdGVyIGFuIGFzc2V0IGZvciBpbnN1cmFuY2UKLy8KLy8gQHBhcmFtIGFzc2V0TmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBhc3NldCB0byBpbnN1cmUKLy8gQHBhcmFtIGFzc2V0VHlwZSAtIFRoZSB0eXBlIG9mIHRoZSBhc3NldCB0byBpbnN1cmUKLy8gQHBhcmFtIGFzc3NldFZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBhc3NldCB0byBpbnN1cmUKLy8gQHBhcmFtIGFzc2V0RGVzY3JpcHRpb24gLSBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIGFzc2V0IHRvIGluc3VyZQovLyBAcmV0dXJucyB2b2lkCmFiaV9yb3V0ZV9yZWdpc3RlckFzc2V0OgoJLy8gYXNzZXREZXNjcmlwdGlvbjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglleHRyYWN0IDIgMAoKCS8vIGFzc2V0VmFsdWU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGFzc2V0VHlwZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFzc2V0TmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJBc3NldChzdHJpbmcsdWludDY0LHN0cmluZyxzdHJpbmcpdm9pZAoJY2FsbHN1YiByZWdpc3RlckFzc2V0CglpbnQgMQoJcmV0dXJuCgpyZWdpc3RlckFzc2V0OgoJcHJvdG8gNCAwCgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NTAKCS8vIHZlcmlmeVR4bih0aGlzLnR4biwgeyBzZW5kZXI6IHRoaXMuY3VzdG9tZXIudmFsdWUgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2Mzc1NzM3NDZmNmQ2NTcyIC8vICJjdXN0b21lciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NTEKCS8vIGFzc2VydCh0aGlzLmFzc2V0U3RhdHVzLnZhbHVlID09PSAncmVqZWN0ZWQnIHx8IHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPT09ICdub25lJykKCWJ5dGUgMHg2MTczNzM2NTc0NTM3NDYxNzQ3NTczIC8vICJhc3NldFN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJYnl0ZSAweDcyNjU2YTY1NjM3NDY1NjQgLy8gInJlamVjdGVkIgoJPT0KCWR1cAoJYm56IHNraXBfb3IwCglieXRlIDB4NjE3MzczNjU3NDUzNzQ2MTc0NzU3MyAvLyAiYXNzZXRTdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWJ5dGUgMHg2ZTZmNmU2NSAvLyAibm9uZSIKCT09Cgl8fAoKc2tpcF9vcjA6Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czo1MgoJLy8gdGhpcy5hc3NldE5hbWUudmFsdWUgPSBhc3NldE5hbWUKCWJ5dGUgMHg2MTczNzM2NTc0NGU2MTZkNjUgLy8gImFzc2V0TmFtZSIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldE5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NTMKCS8vIHRoaXMuYXNzZXRUeXBlLnZhbHVlID0gYXNzZXRUeXBlCglieXRlIDB4NjE3MzczNjU3NDU0Nzk3MDY1IC8vICJhc3NldFR5cGUiCglmcmFtZV9kaWcgLTIgLy8gYXNzZXRUeXBlOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjU0CgkvLyB0aGlzLmFzc3NldFZhbHVlLnZhbHVlID0gYXNzZXRWYWx1ZQoJYnl0ZSAweDYxNzM3MzczNjU3NDU2NjE2Yzc1NjUgLy8gImFzc3NldFZhbHVlIgoJZnJhbWVfZGlnIC0zIC8vIGFzc2V0VmFsdWU6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czo1NQoJLy8gdGhpcy5hc3NldERlc2NyaXB0aW9uLnZhbHVlID0gYXNzZXREZXNjcmlwdGlvbgoJYnl0ZSAweDYxNzM3MzY1NzQ0NDY1NzM2MzcyNjk3MDc0Njk2ZjZlIC8vICJhc3NldERlc2NyaXB0aW9uIgoJZnJhbWVfZGlnIC00IC8vIGFzc2V0RGVzY3JpcHRpb246IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NTYKCS8vIHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPSAncmVxdWVzdGVkJwoJYnl0ZSAweDYxNzM3MzY1NzQ1Mzc0NjE3NDc1NzMgLy8gImFzc2V0U3RhdHVzIgoJYnl0ZSAweDAwMDk3MjY1NzE3NTY1NzM3NDY1NjQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJldmlld1JlcXVlc3Qoc3RyaW5nLGJvb2wpdm9pZAovLwovLyBBbGxvd3MgY3VzdG9tZXIgdG8gcmVnaXN0ZXIgYW4gYXNzZXQgZm9yIGluc3VyYW5jZQovLwovLyBAcGFyYW0gYWNjZXB0YW5jZSAtIFRoZSBib29sZWFuIHZhbHVlIG9mIHdoZXRoZXIgdGhlIGFzc2V0IGlzIGFjY2VwdGVkIG9yIG5vdAovLyBAcmV0dXJucyB2b2lkCmFiaV9yb3V0ZV9yZXZpZXdSZXF1ZXN0OgoJYnl0ZSAweCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBjb21tZW50czogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGFjY2VwdGFuY2U6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMQoJPT0KCWFzc2VydAoJaW50IDAKCWdldGJpdAoKCS8vIGV4ZWN1dGUgcmV2aWV3UmVxdWVzdChzdHJpbmcsYm9vbCl2b2lkCgljYWxsc3ViIHJldmlld1JlcXVlc3QKCWludCAxCglyZXR1cm4KCnJldmlld1JlcXVlc3Q6Cglwcm90byAzIDAKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czo2OAoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5hbmFseXN0LnZhbHVlIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCgl0eG4gU2VuZGVyCglieXRlIDB4NjE2ZTYxNmM3OTczNzQgLy8gImFuYWx5c3QiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjY5CgkvLyBhc3NlcnQoCgkvLyAgICAgICB0aGlzLmFzc2V0U3RhdHVzLnZhbHVlID09PSAncmVxdWVzdGVkJyB8fAoJLy8gICAgICAgICB0aGlzLmFzc2V0U3RhdHVzLnZhbHVlID09PSAnbm9uZScgfHwKCS8vICAgICAgICAgdGhpcy5hc3NldFN0YXR1cy52YWx1ZSA9PT0gJ3JlamVjdGVkJwoJLy8gICAgICkKCWJ5dGUgMHg2MTczNzM2NTc0NTM3NDYxNzQ3NTczIC8vICJhc3NldFN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJYnl0ZSAweDcyNjU3MTc1NjU3Mzc0NjU2NCAvLyAicmVxdWVzdGVkIgoJPT0KCWR1cAoJYm56IHNraXBfb3IxCglieXRlIDB4NjE3MzczNjU3NDUzNzQ2MTc0NzU3MyAvLyAiYXNzZXRTdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWJ5dGUgMHg2ZTZmNmU2NSAvLyAibm9uZSIKCT09Cgl8fAoKc2tpcF9vcjE6CglkdXAKCWJueiBza2lwX29yMgoJYnl0ZSAweDYxNzM3MzY1NzQ1Mzc0NjE3NDc1NzMgLy8gImFzc2V0U3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglieXRlIDB4NzI2NTZhNjU2Mzc0NjU2NCAvLyAicmVqZWN0ZWQiCgk9PQoJfHwKCnNraXBfb3IyOgoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NzQKCS8vIHRoaXMuYW5hbHlzdENvbW1lbnRzLnZhbHVlID0gY29tbWVudHMKCWJ5dGUgMHg2MTZlNjE2Yzc5NzM3NDQzNmY2ZDZkNjU2ZTc0NzMgLy8gImFuYWx5c3RDb21tZW50cyIKCWZyYW1lX2RpZyAtMiAvLyBjb21tZW50czogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czo3NQoJLy8gYWNjZXB0YW5jZQoJZnJhbWVfZGlnIC0xIC8vIGFjY2VwdGFuY2U6IGJvb2wKCWJ6IGlmMF9lbHNlCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjc2CgkvLyB0aGlzLmFzc2V0U3RhdHVzLnZhbHVlID0gJ2FjY2VwdGVkJwoJYnl0ZSAweDYxNzM3MzY1NzQ1Mzc0NjE3NDc1NzMgLy8gImFzc2V0U3RhdHVzIgoJYnl0ZSAweDAwMDg2MTYzNjM2NTcwNzQ2NTY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjc3CgkvLyBhc2FJZCA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgICAgY29uZmlnQXNzZXRUb3RhbDogMSwKCS8vICAgICAgICAgY29uZmlnQXNzZXREZWNpbWFsczogMCwKCS8vICAgICAgICAgY29uZmlnQXNzZXROYW1lOiB0aGlzLmFzc2V0TmFtZS52YWx1ZSwKCS8vICAgICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ0lOU1VSJywKCS8vICAgICAgICAgbm90ZTogJ1Rva2VuIGZvciBhc3NldDogJyArIHRoaXMuYXNzZXROYW1lLnZhbHVlLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6NzgKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IDEKCWludCAxCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czo3OQoJLy8gY29uZmlnQXNzZXREZWNpbWFsczogMAoJaW50IDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjgwCgkvLyBjb25maWdBc3NldE5hbWU6IHRoaXMuYXNzZXROYW1lLnZhbHVlCglieXRlIDB4NjE3MzczNjU3NDRlNjE2ZDY1IC8vICJhc3NldE5hbWUiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6ODEKCS8vIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6ICdJTlNVUicKCWJ5dGUgMHg0OTRlNTM1NTUyIC8vICJJTlNVUiIKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjgyCgkvLyBub3RlOiAnVG9rZW4gZm9yIGFzc2V0OiAnICsgdGhpcy5hc3NldE5hbWUudmFsdWUKCWJ5dGUgMHg1NDZmNmI2NTZlMjA2NjZmNzIyMDYxNzM3MzY1NzQzYTIwIC8vICJUb2tlbiBmb3IgYXNzZXQ6ICIKCWJ5dGUgMHg2MTczNzM2NTc0NGU2MTZkNjUgLy8gImFzc2V0TmFtZSIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJY29uY2F0CglpdHhuX2ZpZWxkIE5vdGUKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglmcmFtZV9idXJ5IC0zIC8vIGFzYUlkOiBhc3NldAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjg0CgkvLyB0aGlzLmFzYUlkLnZhbHVlID0gYXNhSWQKCWJ5dGUgMHg2MTczNjE0OTY0IC8vICJhc2FJZCIKCWZyYW1lX2RpZyAtMyAvLyBhc2FJZDogYXNzZXQKCWFwcF9nbG9iYWxfcHV0CgliIGlmMF9lbmQKCmlmMF9lbHNlOgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6ODYKCS8vIHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPSAncmVqZWN0ZWQnCglieXRlIDB4NjE3MzczNjU3NDUzNzQ2MTc0NzU3MyAvLyAiYXNzZXRTdGF0dXMiCglieXRlIDB4MDAwODcyNjU2YTY1NjM3NDY1NjQKCWFwcF9nbG9iYWxfcHV0CgppZjBfZW5kOgoJcmV0c3ViCgovLyByZWNlaXZlVG9rZW4oYXhmZXIsYXNzZXQpdm9pZAovLwovLyBBbGxvd3MgY3VzdG9tZXIgdG8gcmVnaXN0ZXIgYW4gYXNzZXQgZm9yIGluc3VyYW5jZQovLwovLyBAcGFyYW0gYXNhSWQgLSBUaGUgSUQgb2YgdGhlIEFTQSB0byByZWNlaXZlCi8vIEBwYXJhbSBvcHRpbiAtIFRoZSBvcHRpbiB0cmFuc2FjdGlvbiB0byByZWNlaXZlIHRoZSBBU0EKLy8gQHJldHVybnMgdm9pZAphYmlfcm91dGVfcmVjZWl2ZVRva2VuOgoJLy8gb3B0aW46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBheGZlcgoJPT0KCWFzc2VydAoKCS8vIGFzYUlkOiBhc3NldAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXNzZXRzCgoJLy8gZXhlY3V0ZSByZWNlaXZlVG9rZW4oYXhmZXIsYXNzZXQpdm9pZAoJY2FsbHN1YiByZWNlaXZlVG9rZW4KCWludCAxCglyZXR1cm4KCnJlY2VpdmVUb2tlbjoKCXByb3RvIDIgMAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjEwMAoJLy8gdmVyaWZ5VHhuKHRoaXMudHhuLCB7IHNlbmRlcjogdGhpcy5jdXN0b21lci52YWx1ZSB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJdHhuIFNlbmRlcgoJYnl0ZSAweDYzNzU3Mzc0NmY2ZDY1NzIgLy8gImN1c3RvbWVyIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czoxMDEKCS8vIHZlcmlmeVR4bihvcHRpbiwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLmN1c3RvbWVyLnZhbHVlLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5jdXN0b21lci52YWx1ZSwKCS8vICAgICAgIHhmZXJBc3NldDogYXNhSWQsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIG9wdGluOiBheGZlcgoJZ3R4bnMgU2VuZGVyCglieXRlIDB4NjM3NTczNzQ2ZjZkNjU3MiAvLyAiY3VzdG9tZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldFJlY2VpdmVyCglmcmFtZV9kaWcgLTIgLy8gb3B0aW46IGF4ZmVyCglndHhucyBBc3NldFJlY2VpdmVyCglieXRlIDB4NjM3NTczNzQ2ZjZkNjU3MiAvLyAiY3VzdG9tZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSB4ZmVyQXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBvcHRpbjogYXhmZXIKCWd0eG5zIFhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzYUlkOiBhc3NldAoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0yIC8vIG9wdGluOiBheGZlcgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6MTA3CgkvLyBhc3NlcnQodGhpcy5hc2FJZC52YWx1ZSA9PT0gYXNhSWQpCglieXRlIDB4NjE3MzYxNDk2NCAvLyAiYXNhSWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGFzYUlkOiBhc3NldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjEwOAoJLy8gYXNzZXJ0KHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPT09ICdhY2NlcHRlZCcpCglieXRlIDB4NjE3MzczNjU3NDUzNzQ2MTc0NzU3MyAvLyAiYXNzZXRTdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWJ5dGUgMHg2MTYzNjM2NTcwNzQ2NTY0IC8vICJhY2NlcHRlZCIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czoxMDkKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuY3VzdG9tZXIudmFsdWUsCgkvLyAgICAgICBhc3NldEFtb3VudDogMSwKCS8vICAgICAgIHhmZXJBc3NldDogYXNhSWQsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjExMAoJLy8gYXNzZXRSZWNlaXZlcjogdGhpcy5jdXN0b21lci52YWx1ZQoJYnl0ZSAweDYzNzU3Mzc0NmY2ZDY1NzIgLy8gImN1c3RvbWVyIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9kYXBwX2luc3VyYW5jZS5hbGdvLnRzOjExMQoJLy8gYXNzZXRBbW91bnQ6IDEKCWludCAxCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gY29udHJhY3RzL2RhcHBfaW5zdXJhbmNlLmFsZ28udHM6MTEyCgkvLyB4ZmVyQXNzZXQ6IGFzYUlkCglmcmFtZV9kaWcgLTEgLy8gYXNhSWQ6IGFzc2V0CglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvZGFwcF9pbnN1cmFuY2UuYWxnby50czoxMTQKCS8vIHRoaXMuYXNzZXRTdGF0dXMudmFsdWUgPSAnaW5zdXJlZCcKCWJ5dGUgMHg2MTczNzM2NTc0NTM3NDYxNzQ3NTczIC8vICJhc3NldFN0YXR1cyIKCWJ5dGUgMHgwMDA3Njk2ZTczNzU3MjY1NjQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzLGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoJZXJyCgpjYWxsX05vT3A6CgltZXRob2QgInJlZ2lzdGVyQXNzZXQoc3RyaW5nLHN0cmluZyx1aW50NjQsc3RyaW5nKXZvaWQiCgltZXRob2QgInJldmlld1JlcXVlc3QoYm9vbCxzdHJpbmcpdm9pZCIKCW1ldGhvZCAicmVjZWl2ZVRva2VuKGFzc2V0LGF4ZmVyKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfcmVnaXN0ZXJBc3NldCBhYmlfcm91dGVfcmV2aWV3UmVxdWVzdCBhYmlfcm91dGVfcmVjZWl2ZVRva2VuCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "DappInsurance",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "analyst",
            "type": "address",
            "desc": "The address of who will review and approve asset insurance"
          },
          {
            "name": "customer",
            "type": "address",
            "desc": "The address of the person who will request the asset insurance evaluation"
          }
        ],
        "desc": "Creates the contract with initial addresses",
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "registerAsset",
        "args": [
          {
            "name": "assetName",
            "type": "string",
            "desc": "The name of the asset to insure"
          },
          {
            "name": "assetType",
            "type": "string",
            "desc": "The type of the asset to insure"
          },
          {
            "name": "assetValue",
            "type": "uint64",
            "desc": ""
          },
          {
            "name": "assetDescription",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "Allows customer to register an asset for insurance",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "reviewRequest",
        "args": [
          {
            "name": "acceptance",
            "type": "bool",
            "desc": "The boolean value of whether the asset is accepted or not"
          },
          {
            "name": "comments",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "Allows customer to register an asset for insurance",
        "returns": {
          "type": "void",
          "desc": "void"
        }
      },
      {
        "name": "receiveToken",
        "args": [
          {
            "name": "asaId",
            "type": "asset",
            "desc": "The ID of the ASA to receive"
          },
          {
            "name": "optin",
            "type": "axfer",
            "desc": "The optin transaction to receive the ASA"
          }
        ],
        "desc": "Allows customer to register an asset for insurance",
        "returns": {
          "type": "void",
          "desc": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the DappInsurance smart contract.
 */
export type DappInsurance = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,address)void' | 'createApplication', {
      argsObj: {
        /**
         * The address of who will review and approve asset insurance
         */
        analyst: string
        /**
         * The address of the person who will request the asset insurance evaluation
         */
        customer: string
      }
      argsTuple: [analyst: string, customer: string]
      /**
       * void
       */
      returns: void
    }>
    & Record<'registerAsset(string,string,uint64,string)void' | 'registerAsset', {
      argsObj: {
        /**
         * The name of the asset to insure
         */
        assetName: string
        /**
         * The type of the asset to insure
         */
        assetType: string
        assetValue: bigint | number
        assetDescription: string
      }
      argsTuple: [assetName: string, assetType: string, assetValue: bigint | number, assetDescription: string]
      returns: void
    }>
    & Record<'reviewRequest(bool,string)void' | 'reviewRequest', {
      argsObj: {
        /**
         * The boolean value of whether the asset is accepted or not
         */
        acceptance: boolean
        comments: string
      }
      argsTuple: [acceptance: boolean, comments: string]
      /**
       * void
       */
      returns: void
    }>
    & Record<'receiveToken(asset,axfer)void' | 'receiveToken', {
      argsObj: {
        /**
         * The ID of the ASA to receive
         */
        asaId: number | bigint
        /**
         * The optin transaction to receive the ASA
         */
        optin: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [asaId: number | bigint, optin: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      /**
       * void
       */
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'analyst'?: BinaryState
      'customer'?: BinaryState
      'assetName'?: BinaryState
      'assetType'?: BinaryState
      'asssetValue'?: IntegerState
      'assetDescription'?: BinaryState
      'assetStatus'?: BinaryState
      'analystComments'?: BinaryState
      'asaId'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DappInsuranceSig = keyof DappInsurance['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DappInsuranceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DappInsurance smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DappInsuranceSig> = DappInsurance['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DappInsurance smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DappInsuranceSig> = DappInsurance['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DappInsuranceCreateCalls = (typeof DappInsuranceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DappInsuranceCreateCallParams =
  | (TypedCallParams<'createApplication(address,address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DappInsuranceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DappInsuranceCreateCalls) => DappInsuranceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DappInsuranceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DappInsurance smart contract using the createApplication(address,address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.analyst, args.customer],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the registerAsset(string,string,uint64,string)void ABI method
   *
   * Allows customer to register an asset for insurance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerAsset(args: MethodArgs<'registerAsset(string,string,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerAsset(string,string,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetName, args.assetType, args.assetValue, args.assetDescription],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reviewRequest(bool,string)void ABI method
   *
   * Allows customer to register an asset for insurance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reviewRequest(args: MethodArgs<'reviewRequest(bool,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reviewRequest(bool,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.acceptance, args.comments],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the receiveToken(asset,axfer)void ABI method
   *
   * Allows customer to register an asset for insurance
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static receiveToken(args: MethodArgs<'receiveToken(asset,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'receiveToken(asset,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asaId, args.optin],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DappInsurance smart contract
 */
export class DappInsuranceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DappInsuranceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DappInsurance['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DappInsurance smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DappInsuranceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DappInsuranceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DappInsurance smart contract using the createApplication(address,address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: void
       */
      async createApplication(args: MethodArgs<'createApplication(address,address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(address,address)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(DappInsuranceCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DappInsurance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the registerAsset(string,string,uint64,string)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerAsset(args: MethodArgs<'registerAsset(string,string,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DappInsuranceCallFactory.registerAsset(args, params))
  }

  /**
   * Calls the reviewRequest(bool,string)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public reviewRequest(args: MethodArgs<'reviewRequest(bool,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DappInsuranceCallFactory.reviewRequest(args, params))
  }

  /**
   * Calls the receiveToken(asset,axfer)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: void
   */
  public receiveToken(args: MethodArgs<'receiveToken(asset,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DappInsuranceCallFactory.receiveToken(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DappInsurance['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get analyst() {
        return DappInsuranceClient.getBinaryState(state, 'analyst')
      },
      get customer() {
        return DappInsuranceClient.getBinaryState(state, 'customer')
      },
      get assetName() {
        return DappInsuranceClient.getBinaryState(state, 'assetName')
      },
      get assetType() {
        return DappInsuranceClient.getBinaryState(state, 'assetType')
      },
      get asssetValue() {
        return DappInsuranceClient.getIntegerState(state, 'asssetValue')
      },
      get assetDescription() {
        return DappInsuranceClient.getBinaryState(state, 'assetDescription')
      },
      get assetStatus() {
        return DappInsuranceClient.getBinaryState(state, 'assetStatus')
      },
      get analystComments() {
        return DappInsuranceClient.getBinaryState(state, 'analystComments')
      },
      get asaId() {
        return DappInsuranceClient.getIntegerState(state, 'asaId')
      },
    }
  }

  public compose(): DappInsuranceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      registerAsset(args: MethodArgs<'registerAsset(string,string,uint64,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reviewRequest(args: MethodArgs<'reviewRequest(bool,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reviewRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      receiveToken(args: MethodArgs<'receiveToken(asset,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.receiveToken(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DappInsuranceComposer
  }
}
export type DappInsuranceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the registerAsset(string,string,uint64,string)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerAsset(args: MethodArgs<'registerAsset(string,string,uint64,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DappInsuranceComposer<[...TReturns, MethodReturn<'registerAsset(string,string,uint64,string)void'>]>

  /**
   * Calls the reviewRequest(bool,string)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reviewRequest(args: MethodArgs<'reviewRequest(bool,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DappInsuranceComposer<[...TReturns, MethodReturn<'reviewRequest(bool,string)void'>]>

  /**
   * Calls the receiveToken(asset,axfer)void ABI method.
   *
   * Allows customer to register an asset for insurance
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveToken(args: MethodArgs<'receiveToken(asset,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): DappInsuranceComposer<[...TReturns, MethodReturn<'receiveToken(asset,axfer)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the DappInsurance smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): DappInsuranceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DappInsuranceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<DappInsuranceComposerResults<TReturns>>
}
export type DappInsuranceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
